/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jasperdatasourcegenerator;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;

/**
 *
 * @author user
 */
public class Main extends javax.swing.JFrame {

    private JFileChooser jFileChooser;
    private File file;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        jFileChooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int i = jFileChooser.showOpenDialog(null);
        if (i == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser.getSelectedFile();
            jTextField1.setText(file.getPath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        boolean fieldNamePassed = false;
        int NumOffieldNamePassed = 0;
        int counter = 0;
        if (file != null && file.exists()) {

            String fileName = file.getName().replace(".jrxml", "") + "DataSource";

            List<String> fieldNames = new ArrayList();

            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                String n;
                while ((n = br.readLine()) != null) {
                    counter++;
                    if (n.contains("<field ")) {

                        fieldNamePassed = true;
                        if (fieldNamePassed) {
                            NumOffieldNamePassed++;
                        }

                        int from = n.indexOf("\"") + 1;
                        int to = n.indexOf("\"", from);

                        String fieldName = n.substring(from, to);
                        fieldNames.add(fieldName);

                    } else {
                        if (fieldNamePassed && ((counter - NumOffieldNamePassed) > 10)) {
                            System.out.println("End: " + counter + "!");
                            break;
                        }
                    }
                }

                String dataSource = generateDataSource(fileName, fieldNames);
                String dataSourceInstance = generateDataSourceInstance(fileName, fieldNames);
                generateDataSourceText(fileName, fieldNames);
                generateDataSourceInstanceText(fileName, fieldNames);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jFileChooser
     */
    public JFileChooser getjFileChooser() {
        return jFileChooser;
    }

    /**
     * @param jFileChooser the jFileChooser to set
     */
    public void setjFileChooser(JFileChooser jFileChooser) {
        this.jFileChooser = jFileChooser;
    }

    /**
     * @return the file
     */
    public File getFile() {
        return file;
    }

    /**
     * @param file the file to set
     */
    public void setFile(File file) {
        this.file = file;
    }

    public String generateDataSource(String className, List<String> fieldNames) {
        String generated = ""
                + "import net.sf.jasperreports.engine.JRDataSource;"
                + "import net.sf.jasperreports.engine.JRException;"
                + "import net.sf.jasperreports.engine.JRField;"
                + "public class " + className + " implements JRDataSource {";

        //Field Names
        for (String f : fieldNames) {
            generated += "private String " + f + ";";
        }
        //read
        generated += "int read = 0;";
        //next
        generated += "@Override public boolean next() throws JRException { read++; return read != 2; }";
        //constructor
        generated += "public " + className + "(){}";

        //getfieldvalue
        generated += "@Override public Object getFieldValue(JRField jrf) throws JRException { String fieldName = jrf.getName();";

        boolean first = true;
        for (String f : fieldNames) {

            if (first) {
                generated += "if (fieldName.equals(\"" + f + "\")) { return " + f + "; }";
            } else {
                generated += "else if (fieldName.equals(\"" + f + "\")) { return " + f + "; }";
            }

            first = false;
        }

        generated += " return null; }";

        //encapsulation
        for (String f : fieldNames) {
            generated += "public String get" + f.replaceFirst(f.charAt(0) + "", (f.charAt(0) + "").toUpperCase()) + "(){ return this." + f + "; }";
            generated += "public void set" + f.replaceFirst(f.charAt(0) + "", (f.charAt(0) + "").toUpperCase()) + "(String " + f + "){ this." + f + " = " + f + "; }";
        }

        generated += "}";
        return generated;
    }

    public String generateDataSourceInstance(String className, List<String> fieldNames) {
        String generated = "";

        generated += className + " dataSource = new " + className + "();";
        for (String f : fieldNames) {
            generated += "dataSource.set" + f.replaceFirst(f.charAt(0) + "", (f.charAt(0) + "").toUpperCase()) + "(\"" + f + "\");";
        }

        return generated;
    }

    public String generateDataSourceText(String className, List<String> fieldNames) {
        String generated = "";

        jTextArea1.append("import net.sf.jasperreports.engine.JRDataSource;\n");
        jTextArea1.append("import net.sf.jasperreports.engine.JRException;\n");
        jTextArea1.append("import net.sf.jasperreports.engine.JRField;\n\n");
        jTextArea1.append("public class " + className + " implements JRDataSource {\n\n");
        //Field Names
        for (String f : fieldNames) {
            jTextArea1.append("private String " + f + ";\n");
        }
        //read
        jTextArea1.append("int read = 0;\n\n");
        //next
        jTextArea1.append("@Override\n public boolean next() throws JRException {\n read++;\n return read != 2;\n }\n");
        //constructor
        jTextArea1.append("public " + className + "(){\n}\n");
        //getfieldvalue
        jTextArea1.append("@Override\n public Object getFieldValue(JRField jrf) throws JRException {\n String fieldName = jrf.getName();\n");

        boolean first = true;
        for (String f : fieldNames) {

            if (first) {
                jTextArea1.append("if (fieldName.equals(\"" + f + "\")) {\n return " + f + ";\n }\n");
            } else {
                jTextArea1.append("else if (fieldName.equals(\"" + f + "\")) {\n return " + f + ";\n }\n");
            }

            first = false;
        }

        jTextArea1.append(" return null;\n }\n");
        //encapsulation
        for (String f : fieldNames) {
            jTextArea1.append("public String get" + f.replaceFirst(f.charAt(0) + "", (f.charAt(0) + "").toUpperCase()) + "(){\n return this." + f + ";\n }\n");
            jTextArea1.append("public void set" + f.replaceFirst(f.charAt(0) + "", (f.charAt(0) + "").toUpperCase()) + "(String " + f + "){\n this." + f + " = " + f + ";\n }\n");
        }
        jTextArea1.append("}\n");
        return generated;
    }

    public String generateDataSourceInstanceText(String className, List<String> fieldNames) {
        String generated = "";
        jTextArea2.append(className + " dataSource = new " + className + "();\n");
        for (String f : fieldNames) {
            jTextArea2.append("dataSource.set" + f.replaceFirst(f.charAt(0) + "", (f.charAt(0) + "").toUpperCase()) + "(\"" + f + "\");\n");
        }
        return generated;
    }
}
